/* @@@LICENSE
*
*      Copyright (c) 2013-2021 LG Electronics, Inc.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
* LICENSE@@@ */

#define M_PI 3.1415926535897932384626433832795
uniform highp float _start;
uniform highp float _end;
uniform highp float _leftStart;
uniform highp float _leftEnd;

uniform lowp sampler2D source;
uniform highp float qt_Opacity;
varying highp vec2 qt_TexCoord0;
void main() {
    highp vec4 texColor = texture2D(source, qt_TexCoord0);
    if (qt_TexCoord0.s >= _end || qt_TexCoord0.s < _leftStart) {
        texColor.a = 0.0;
    }
    else if (qt_TexCoord0.s >= _start) {
        // gradient base on cosinus
          highp float normalizedElideWidth = (M_PI / 2.0) / (_end - _start);
          texColor.a = texColor.a * (cos(normalizedElideWidth * (qt_TexCoord0.s - _start)));

        // gradient based on sinus
          highp float normalizedElideWidth = (M_PI / 2.0) / (_end - _start);
          texColor.a = texColor.a * (1.0 - sin(normalizedElideWidth * (qt_TexCoord0.s - _start)));

        // linear gradient
          highp float normalizedElideWidth = 1.0 / (_end - _start);
          texColor.a = texColor.a * (1.0 - (normalizedElideWidth * (qt_TexCoord0.s - _start)));

        // quadratic gradient
        highp float normalizedElideWidth = 1.0 / (_end - _start);
        texColor = texColor * (1.0 - pow((normalizedElideWidth * (qt_TexCoord0.s - _start)), 2.0));
    }
    else if (qt_TexCoord0.s < _leftEnd) {
        // quadratic gradient
        highp float normalizedElideWidth = 1.0 / (_leftEnd - _leftStart);
        texColor = texColor * (1.0 - pow((normalizedElideWidth * (_leftEnd - qt_TexCoord0.s)), 2.0));
    }
    texColor = texColor * qt_Opacity;
    gl_FragColor = texColor;
}
